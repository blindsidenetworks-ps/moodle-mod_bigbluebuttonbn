{"version":3,"file":"modform.min.js","sources":["../src/modform.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * JS for the mod_form page on mod_bigbluebuttonbn plugin.\n *\n * @module      mod_bigbluebuttonbn/mod_form\n * @copyright   2021 Blindside Networks Inc\n * @license     http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport {get_string as getString} from 'core/str';\nimport Notification from 'core/notification';\nimport Templates from \"core/templates\";\n\n/**\n * Get all selectors in one place.\n *\n */\nconst ELEMENT_SELECTOR = {\n    instanceTypeSelection: () => document.querySelector('select#id_type'),\n    instanceTypeProfiles: () => document.querySelector('[data-profile-types]'),\n    participantData: () => document.querySelector('[data-participant-data]'),\n    participantList: () => document.getElementsByName('participants')[0],\n    participantTable: () => document.getElementById('participant_list_table'),\n    participantSelectionType: () => document.getElementsByName('bigbluebuttonbn_participant_selection_type')[0],\n    participantSelection: () => document.getElementsByName('bigbluebuttonbn_participant_selection')[0],\n    participantAddButton: () => document.getElementsByName('bigbluebuttonbn_participant_selection_add')[0],\n};\n/**\n * Initialise the moodle form code.\n *\n * This will help hide or show items depending on the selection of the instance type.\n *\n * @method init\n * @param {object} info\n */\nexport const init = (info) => {\n    const selectedType = ELEMENT_SELECTOR.instanceTypeSelection();\n    const instanceTypeProfiles = JSON.parse(ELEMENT_SELECTOR.instanceTypeProfiles().dataset.profileTypes);\n\n    let profileType = info.instanceTypeDefault;\n    if (selectedType !== null && selectedType.selectedIndex !== -1) {\n        profileType = selectedType.options[selectedType.selectedIndex].value;\n    }\n\n    const isFeatureEnabled = (profileType, feature) => {\n        const features = instanceTypeProfiles[profileType].features;\n        return (features.indexOf(feature) !== -1);\n    };\n    applyInstanceTypeProfile(profileType, isFeatureEnabled);\n\n    // Change form visible fields depending on the selection.\n    selectedType.addEventListener('change', (e) => {\n        applyInstanceTypeProfile(e.target.value, isFeatureEnabled);\n    });\n\n    ELEMENT_SELECTOR.participantSelectionType().addEventListener('change', (e) => {\n        const currentTypeSelect = e.target;\n        updateSelectionFromType(currentTypeSelect);\n    });\n\n    ELEMENT_SELECTOR.participantAddButton().addEventListener('click', (e) => {\n        e.stopPropagation();\n        e.preventDefault();\n        participantAddFromCurrentSelection();\n    });\n\n    participantListInit();\n};\n\n/**\n * Show or hide form element depending on the selected profile\n *\n * @param {string} profileType\n * @param {function} isFeatureEnabled\n */\nconst applyInstanceTypeProfile = (profileType, isFeatureEnabled) => {\n    let showAll = isFeatureEnabled(profileType, 'all');\n    const showFieldset = (id, show) => {\n        // Show room settings validation.\n        const node = document.querySelector('#' + id);\n        if (!node) {\n            return;\n        }\n        if (show) {\n            node.style.display = 'block';\n            return;\n        }\n        node.style.display = 'none';\n    };\n    const showInput = (id, show) => {\n        // Show room settings validation.\n        const node = document.querySelector('#' + id);\n        if (!node) {\n            return;\n        }\n        var ancestor = node.closest('div').closest('div');\n        if (show) {\n            ancestor.style.display = 'block';\n            return;\n        }\n        ancestor.style.display = 'none';\n    };\n    const showFormGroup = (id, show) => {\n        // Show room settings validation.\n        const node = document.querySelector('#fgroup_id_' + id);\n        if (!node) {\n            return;\n        }\n        if (show) {\n            node.classList.remove('hidden');\n            return;\n        }\n        node.classList.add('hidden');\n    };\n    // Show room settings validation.\n    showFieldset('id_room', showAll ||\n        isFeatureEnabled(profileType, 'showroom'));\n    showInput('id_record', showAll ||\n        isFeatureEnabled(profileType, 'showroom'));\n    // Show recordings settings validation.\n    showFieldset('id_recordings', showAll ||\n        isFeatureEnabled(profileType, 'showrecordings'));\n    // Show recordings imported settings validation.\n    showInput('id_recordings_imported', showAll ||\n        isFeatureEnabled(profileType, 'showrecordings'));\n    // Show lock settings validation.\n    showFieldset('id_lock', showAll ||\n        isFeatureEnabled(profileType, 'lock'));\n    // Preuploadpresentation feature validation.\n    showFieldset('id_preuploadpresentation', showAll ||\n        isFeatureEnabled(profileType, 'preuploadpresentation'));\n    // Participants feature validation.\n    showFieldset('id_permissions', showAll ||\n        isFeatureEnabled(profileType, 'permissions'));\n    // Schedule feature validation.\n    showFieldset('id_schedule', showAll ||\n        isFeatureEnabled(profileType, 'schedule'));\n    // Common module settings validation.\n    showFieldset('id_modstandardelshdr', showAll ||\n        isFeatureEnabled(profileType, 'modstandardelshdr'));\n    // Restrict access validation.\n    showFieldset('id_availabilityconditionsheader', showAll ||\n        isFeatureEnabled(profileType, 'availabilityconditionsheader'));\n    // Tags validation.\n    showFieldset('id_tagshdr', showAll || isFeatureEnabled(profileType, 'tagshdr'));\n    // Competencies validation.\n    showFieldset('id_competenciessection', showAll ||\n        isFeatureEnabled(profileType, 'competenciessection'));\n    // Completion validation.\n    showFormGroup('completionattendancegroup', showAll ||\n        isFeatureEnabled(profileType, 'completionattendance'));\n    // Completion validation.\n    showFormGroup('completionengagementgroup', showAll ||\n        isFeatureEnabled(profileType, 'completionengagement'));\n};\n\n/**\n * Init the participant list\n */\nconst participantListInit = () => {\n    const participantData = JSON.parse(ELEMENT_SELECTOR.participantData().dataset.participantData);\n    const participantList = getParticipantList();\n    participantList.forEach(participant => {\n        const selectionTypeValue = participant.selectiontype;\n        const selectionValue = participant.selectionid;\n        const selectionRole = participant.role;\n        if (participant.selectiontype === 'all' ||\n            typeof participantData[participant.selectiontype].children[participant.selectionid] !== 'undefined') {\n            // Add it to the form, but don't add the delete button if it is the first item.\n            participantAddToForm(selectionTypeValue, selectionValue, selectionRole, true).then();\n        }\n    });\n};\n\n/**\n * Add rows to the participant list depending on the current selection.\n *\n * @param {string} selectionTypeValue\n * @param {string} selectionValue\n * @param {string} selectedRole\n * @param {boolean} canRemove\n * @returns {Promise<void>}\n */\nconst participantAddToForm = async(selectionTypeValue, selectionValue, selectedRole, canRemove) => {\n    const participantData = JSON.parse(ELEMENT_SELECTOR.participantData().dataset.participantData);\n    const sviewer = await getString('mod_form_field_participant_bbb_role_viewer', 'mod_bigbluebuttonbn');\n    const smoderator = await getString('mod_form_field_participant_bbb_role_moderator', 'mod_bigbluebuttonbn');\n    let roles = {\n        viewer: {'id': 'viewer', label: sviewer},\n        moderator: {'id': 'moderator', label: smoderator}\n    };\n    roles[selectedRole].isselected = true;\n    try {\n        const listTable = document.querySelector('#participant_list_table tbody');\n        const templateContext = {\n            'selectiontypevalue': selectionTypeValue,\n            'selectionvalue': selectionValue,\n            'participanttype': participantData[selectionTypeValue].name,\n            'participantvalue':\n                (selectionTypeValue !== 'all') ?\n                    participantData[selectionTypeValue].children[selectionValue].name : null,\n            'roles': Object.values(roles),\n            'canRemove': canRemove\n        };\n        const {html, js} = await Templates.renderForPromise('mod_bigbluebuttonbn/participant_form_add', templateContext);\n        const newNode = Templates.appendNodeContents(listTable, html, js)[0];\n        newNode.querySelector('.participant-select').addEventListener('change', () => {\n            participantListRoleUpdate(selectionTypeValue, selectionValue);\n        });\n        // Now add the callbacks: participantListRoleUpdate() and participantRemove().\n        const removeNode = newNode.querySelector('.remove-button');\n        if (removeNode) {\n            removeNode\n                .addEventListener('click', () => {\n                    participantRemove(selectionTypeValue, selectionValue);\n                });\n        }\n\n    } catch (e) {\n        Notification.exception(e);\n    }\n};\n/*\n\n */\n\n/**\n * Update the related form element with the list value.\n *\n * @param {object} list\n */\nconst participantListUpdate = (list) => {\n    const participantList = ELEMENT_SELECTOR.participantList();\n    participantList.value = JSON.stringify(list);\n};\n\n/**\n *\n * @returns {any}\n */\nconst getParticipantList = () => {\n    const participantListValue = ELEMENT_SELECTOR.participantList().value;\n    if (participantListValue) {\n        return JSON.parse(participantListValue);\n    }\n    return [];\n};\n\n/**\n * Remove participant both in the table/form and in the form element.\n *\n * @param {string} selectionTypeValue\n * @param {string} selectionValue\n */\nconst participantRemove = (selectionTypeValue, selectionValue) => {\n    const pList = getParticipantList();\n    const id = 'participant_list_tr_' + selectionTypeValue + '-' + selectionValue;\n    const participantListTable = ELEMENT_SELECTOR.participantTable();\n    const selectionid = (selectionValue === '' ? null : selectionValue);\n    for (let i = 0; i < pList.length; i++) {\n        if (pList[i].selectiontype === selectionTypeValue &&\n            pList[i].selectionid === selectionid) {\n            pList.splice(i, 1);\n        }\n    }\n    // Remove from the form.\n    for (let i = 0; i < participantListTable.rows.length; i++) {\n        if (participantListTable.rows[i].id === id) {\n            participantListTable.deleteRow(i);\n        }\n    }\n    // Update value in the form.\n    participantListUpdate(pList);\n};\n\n/**\n * Role update\n *\n * @param {string} type\n * @param {string} id\n */\nconst participantListRoleUpdate = (type, id) => {\n    // Update in memory.\n    const participantListRoleSelection = document.querySelector(`#participant_list_tr_${type}-${id} .participant-select`);\n    const pList = getParticipantList();\n\n    for (var i = 0; i < pList.length; i++) {\n        if (pList[i].selectiontype === type && pList[i].selectionid === id) {\n            pList[i].role = participantListRoleSelection.value;\n        }\n    }\n    // Update in the form.\n    participantListUpdate(pList);\n};\n\n/**\n * Add participant from the currently selected options\n */\nconst participantAddFromCurrentSelection = () => {\n    let selectionType = ELEMENT_SELECTOR.participantSelectionType();\n    let selection = ELEMENT_SELECTOR.participantSelection();\n    const pList = getParticipantList();\n    // Lookup to see if it has been added already.\n    for (var i = 0; i < pList.length; i++) {\n        if (pList[i].selectiontype === selectionType.value &&\n            pList[i].selectionid === selection.value) {\n            return;\n        }\n    }\n    pList.push({\n        \"selectiontype\": selectionType.value,\n        \"selectionid\": selection.value,\n        \"role\": \"viewer\"\n    });\n    // Add it to the form.\n    participantAddToForm(selectionType.value, selection.value, 'viewer', true).then();\n    // Update in the form.\n    participantListUpdate(pList);\n};\n\n/**\n * Update selectable options when changing types\n *\n * @param {HTMLNode} currentTypeSelect\n */\nconst updateSelectionFromType = (currentTypeSelect) => {\n    const createNewOption = (selectItem, label, value) => {\n        const option = document.createElement('option');\n        option.text = label;\n        option.value = value;\n\n        selectItem.add(option);\n    };\n\n    const participantData = JSON.parse(ELEMENT_SELECTOR.participantData().dataset.participantData);\n    // Clear all selection items.\n    const participantSelect = ELEMENT_SELECTOR.participantSelection();\n    while (participantSelect.firstChild) {\n        participantSelect.removeChild(participantSelect.firstChild);\n    }\n    // Add options depending on the selection.\n    if (currentTypeSelect.selectedIndex !== -1) {\n        const options = Object.values(participantData[currentTypeSelect.value].children);\n        options.forEach(option => {\n            createNewOption(participantSelect, option.name, option.id);\n        });\n\n        if (currentTypeSelect.value === 'all') {\n            createNewOption(participantSelect, '---------------', 'all');\n            participantSelect.disabled = true;\n        } else {\n            participantSelect.disabled = false;\n        }\n    }\n};\n"],"names":["ELEMENT_SELECTOR","document","querySelector","getElementsByName","getElementById","info","selectedType","instanceTypeProfiles","JSON","parse","dataset","profileTypes","profileType","instanceTypeDefault","selectedIndex","options","value","isFeatureEnabled","feature","features","indexOf","applyInstanceTypeProfile","addEventListener","e","target","currentTypeSelect","updateSelectionFromType","stopPropagation","preventDefault","participantAddFromCurrentSelection","participantListInit","showAll","showFieldset","id","show","node","style","display","showInput","ancestor","closest","showFormGroup","classList","remove","add","participantData","getParticipantList","forEach","participant","selectionTypeValue","selectiontype","selectionValue","selectionid","selectionRole","role","children","participantAddToForm","then","selectedRole","canRemove","sviewer","smoderator","roles","viewer","label","moderator","isselected","listTable","templateContext","name","Object","values","Templates","renderForPromise","html","js","newNode","appendNodeContents","participantListRoleUpdate","removeNode","participantRemove","exception","participantListUpdate","list","stringify","participantListValue","pList","participantListTable","i","length","splice","rows","deleteRow","type","participantListRoleSelection","selectionType","selection","push","createNewOption","selectItem","option","createElement","text","participantSelect","firstChild","removeChild","disabled"],"mappings":"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"}