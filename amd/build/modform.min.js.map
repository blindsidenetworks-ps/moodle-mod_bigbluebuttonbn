{"version":3,"sources":["../src/modform.js"],"names":["ELEMENT_SELECTOR","instanceTypeSelection","document","querySelector","instanceTypeProfiles","participantData","participantList","getElementsByName","participantTable","getElementById","participantSelectionType","participantSelection","participantAddButton","init","info","selectedType","JSON","parse","dataset","profileTypes","profileType","instanceTypeDefault","selectedIndex","options","value","isFeatureEnabled","feature","features","indexOf","applyInstanceTypeProfile","addEventListener","e","target","currentTypeSelect","updateSelectionFromType","stopPropagation","preventDefault","participantAddFromCurrentSelection","participantListInit","showAll","showFieldset","id","show","node","style","display","showInput","ancestor","closest","showFormGroup","classList","remove","add","getParticipantList","forEach","participant","selectionTypeValue","selectiontype","selectionValue","selectionid","selectionRole","role","children","participantAddToForm","selectedRole","canRemove","sviewer","smoderator","roles","viewer","label","moderator","isselected","listTable","templateContext","name","Object","values","Templates","renderForPromise","html","js","newNode","appendNodeContents","participantListRoleUpdate","removeNode","participantRemove","Notification","exception","participantListUpdate","list","stringify","participantListValue","pList","participantListTable","i","length","splice","rows","deleteRow","type","participantListRoleSelection","selectionType","selection","push","createNewOption","selectItem","option","createElement","text","participantSelect","firstChild","removeChild","disabled"],"mappings":"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","sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\nimport {get_string as getString} from 'core/str';\nimport Notification from 'core/notification';\nimport Templates from \"core/templates\";\n\n/**\n * Get all selectors in one place.\n *\n */\nconst ELEMENT_SELECTOR = {\n    instanceTypeSelection: () => document.querySelector('select#id_type'),\n    instanceTypeProfiles: () => document.querySelector('[data-profile-types]'),\n    participantData: () => document.querySelector('[data-participant-data]'),\n    participantList: () => document.getElementsByName('participants')[0],\n    participantTable: () => document.getElementById('participant_list_table'),\n    participantSelectionType: () => document.getElementsByName('bigbluebuttonbn_participant_selection_type')[0],\n    participantSelection: () => document.getElementsByName('bigbluebuttonbn_participant_selection')[0],\n    participantAddButton: () => document.getElementsByName('bigbluebuttonbn_participant_selection_add')[0],\n};\n/**\n * Initialise the moodle form code.\n *\n * This will help hide or show items depending on the selection of the instance type.\n *\n * @method init\n * @param {object} info\n */\nexport const init = (info) => {\n    const selectedType = ELEMENT_SELECTOR.instanceTypeSelection();\n    const instanceTypeProfiles = JSON.parse(ELEMENT_SELECTOR.instanceTypeProfiles().dataset.profileTypes);\n\n    let profileType = info.instanceTypeDefault;\n    if (selectedType !== null && selectedType.selectedIndex !== -1) {\n        profileType = selectedType.options[selectedType.selectedIndex].value;\n    }\n\n    const isFeatureEnabled = (profileType, feature) => {\n        const features = instanceTypeProfiles[profileType].features;\n        return (features.indexOf(feature) !== -1);\n    };\n    applyInstanceTypeProfile(profileType, isFeatureEnabled);\n\n    // Change form visible fields depending on the selection.\n    selectedType.addEventListener('change', (e) => {\n        applyInstanceTypeProfile(e.target.value, isFeatureEnabled);\n    });\n\n    ELEMENT_SELECTOR.participantSelectionType().addEventListener('change', (e) => {\n        const currentTypeSelect = e.target;\n        updateSelectionFromType(currentTypeSelect);\n    });\n\n    ELEMENT_SELECTOR.participantAddButton().addEventListener('click', (e) => {\n        e.stopPropagation();\n        e.preventDefault();\n        participantAddFromCurrentSelection();\n    });\n\n    participantListInit();\n};\n\n/**\n * Show or hide form element depending on the selected profile\n *\n * @param {string} profileType\n * @param {function} isFeatureEnabled\n */\nconst applyInstanceTypeProfile = (profileType, isFeatureEnabled) => {\n    let showAll = isFeatureEnabled(profileType, 'all');\n    const showFieldset = (id, show) => {\n        // Show room settings validation.\n        const node = document.querySelector('#' + id);\n        if (!node) {\n            return;\n        }\n        if (show) {\n            node.style.display = 'block';\n            return;\n        }\n        node.style.display = 'none';\n    };\n    const showInput = (id, show) => {\n        // Show room settings validation.\n        const node = document.querySelector('#' + id);\n        if (!node) {\n            return;\n        }\n        var ancestor = node.closest('div').closest('div');\n        if (show) {\n            ancestor.style.display = 'block';\n            return;\n        }\n        ancestor.style.display = 'none';\n    };\n    const showFormGroup = (id, show) => {\n        // Show room settings validation.\n        const node = document.querySelector('#fgroup_id_' + id);\n        if (!node) {\n            return;\n        }\n        if (show) {\n            node.classList.remove('hidden');\n            return;\n        }\n        node.classList.add('hidden');\n    };\n    // Show room settings validation.\n    showFieldset('id_room', showAll ||\n        isFeatureEnabled(profileType, 'showroom'));\n    showInput('id_record', showAll ||\n        isFeatureEnabled(profileType, 'showroom'));\n    // Show recordings settings validation.\n    showFieldset('id_recordings', showAll ||\n        isFeatureEnabled(profileType, 'showrecordings'));\n    // Show recordings imported settings validation.\n    showInput('id_recordings_imported', showAll ||\n        isFeatureEnabled(profileType, 'showrecordings'));\n    // Preuploadpresentation feature validation.\n    showFieldset('id_preuploadpresentation', showAll ||\n        isFeatureEnabled(profileType, 'preuploadpresentation'));\n    // Participants feature validation.\n    showFieldset('id_permissions', showAll ||\n        isFeatureEnabled(profileType, 'permissions'));\n    // Schedule feature validation.\n    showFieldset('id_schedule', showAll ||\n        isFeatureEnabled(profileType, 'schedule'));\n    // Common module settings validation.\n    showFieldset('id_modstandardelshdr', showAll ||\n        isFeatureEnabled(profileType, 'modstandardelshdr'));\n    // Restrict access validation.\n    showFieldset('id_availabilityconditionsheader', showAll ||\n        isFeatureEnabled(profileType, 'availabilityconditionsheader'));\n    // Tags validation.\n    showFieldset('id_tagshdr', showAll || isFeatureEnabled(profileType, 'tagshdr'));\n    // Competencies validation.\n    showFieldset('id_competenciessection', showAll ||\n        isFeatureEnabled(profileType, 'competenciessection'));\n    // Completion validation.\n    showFormGroup('completionattendancegroup', showAll ||\n        isFeatureEnabled(profileType, 'completionattendance'));\n    // Completion validation.\n    showFormGroup('completionengagementgroup', showAll ||\n        isFeatureEnabled(profileType, 'completionengagement'));\n};\n\n/**\n * Init the participant list\n */\nconst participantListInit = () => {\n    const participantData = JSON.parse(ELEMENT_SELECTOR.participantData().dataset.participantData);\n    const participantList = getParticipantList();\n    participantList.forEach(participant => {\n        const selectionTypeValue = participant.selectiontype;\n        const selectionValue = participant.selectionid;\n        const selectionRole = participant.role;\n        if (participant.selectiontype === 'all' ||\n            typeof participantData[participant.selectiontype].children[participant.selectionid] !== 'undefined') {\n            // Add it to the form, but don't add the delete button if it is the first item.\n            participantAddToForm(selectionTypeValue, selectionValue, selectionRole, true);\n        }\n    });\n};\n\n/**\n * Add rows to the participant list dependingon the current selection.\n *\n * @param {string} selectionTypeValue\n * @param {string} selectionValue\n * @param {string} selectedRole\n * @param {bool} canRemove\n * @returns {Promise<void>}\n */\nconst participantAddToForm = async(selectionTypeValue, selectionValue, selectedRole, canRemove) => {\n    const participantData = JSON.parse(ELEMENT_SELECTOR.participantData().dataset.participantData);\n    const sviewer = await getString('mod_form_field_participant_bbb_role_viewer', 'mod_bigbluebuttonbn');\n    const smoderator = await getString('mod_form_field_participant_bbb_role_moderator', 'mod_bigbluebuttonbn');\n    let roles = {\n        viewer: {'id': 'viewer', label: sviewer},\n        moderator: {'id': 'moderator', label: smoderator}\n    };\n    roles[selectedRole].isselected = true;\n    try {\n        const listTable = document.querySelector('#participant_list_table tbody');\n        const templateContext = {\n            'selectiontypevalue': selectionTypeValue,\n            'selectionvalue': selectionValue,\n            'participanttype': participantData[selectionTypeValue].name,\n            'participantvalue':\n                (selectionTypeValue !== 'all') ?\n                    participantData[selectionTypeValue].children[selectionValue].name : null,\n            'roles': Object.values(roles),\n            'canRemove': canRemove\n        };\n        const {html, js} = await Templates.renderForPromise('mod_bigbluebuttonbn/participant_form_add', templateContext);\n        const newNode = Templates.appendNodeContents(listTable, html, js)[0];\n        newNode.querySelector('.participant-select').addEventListener('change', () => {\n            participantListRoleUpdate(selectionTypeValue, selectionValue);\n        });\n        // Now add the callbacks: participantListRoleUpdate() and participantRemove()\n        const removeNode = newNode.querySelector('.remove-button');\n        if (removeNode) {\n            removeNode\n                .addEventListener('click', () => {\n                    participantRemove(selectionTypeValue, selectionValue);\n                });\n        }\n\n    } catch (e) {\n        Notification.exception(e);\n    }\n};\n/*\n\n */\n\n/**\n * Update the related form element with the list value.\n *\n * @param {object} list\n */\nconst participantListUpdate = (list) => {\n    const participantList = ELEMENT_SELECTOR.participantList();\n    participantList.value = JSON.stringify(list);\n};\n\n/**\n *\n * @returns {any}\n */\nconst getParticipantList = () => {\n    const participantListValue = ELEMENT_SELECTOR.participantList().value;\n    if (participantListValue) {\n        return JSON.parse(participantListValue);\n    }\n    return [];\n};\n\n/**\n * Remove participant both in the table/form and in the form element.\n *\n * @param {string} selectionTypeValue\n * @param {string} selectionValue\n */\nconst participantRemove = (selectionTypeValue, selectionValue) => {\n    const pList = getParticipantList();\n    const id = 'participant_list_tr_' + selectionTypeValue + '-' + selectionValue;\n    const participantListTable = ELEMENT_SELECTOR.participantTable();\n    const selectionid = (selectionValue === '' ? null : selectionValue);\n    for (let i = 0; i < pList.length; i++) {\n        if (pList[i].selectiontype === selectionTypeValue &&\n            pList[i].selectionid === selectionid) {\n            pList.splice(i, 1);\n        }\n    }\n    // Remove from the form.\n    for (let i = 0; i < participantListTable.rows.length; i++) {\n        if (participantListTable.rows[i].id === id) {\n            participantListTable.deleteRow(i);\n        }\n    }\n    // Update value in the form.\n    participantListUpdate(pList);\n};\n\n/**\n * Role update\n *\n * @param {string} type\n * @param {number} id\n */\nconst participantListRoleUpdate = (type, id) => {\n    // Update in memory.\n    const participantListRoleSelection = document.querySelector(`#participant_list_tr_${type}-${id} .participant-select`);\n    const pList = getParticipantList();\n\n    for (var i = 0; i < pList.length; i++) {\n        if (pList[i].selectiontype === type &&\n            pList[i].selectionid === (id === '' ? null : id)) {\n            pList[i].role = participantListRoleSelection.value;\n        }\n    }\n    // Update in the form.\n    participantListUpdate(pList);\n};\n\n/**\n * Add participant from the currently selected options\n */\nconst participantAddFromCurrentSelection = () => {\n    let selectionType = ELEMENT_SELECTOR.participantSelectionType();\n    let selection = ELEMENT_SELECTOR.participantSelection();\n    const pList = getParticipantList();\n    // Lookup to see if it has been added already.\n    for (var i = 0; i < pList.length; i++) {\n        if (pList[i].selectiontype === selectionType.value &&\n            pList[i].selectionid === selection.value) {\n            return;\n        }\n    }\n    pList.push({\n        \"selectiontype\": selectionType.value,\n        \"selectionid\": selection.value,\n        \"role\": \"viewer\"\n    });\n    // Add it to the form.\n    participantAddToForm(selectionType.value, selection.value, 'viewer', true);\n    // Update in the form.\n    participantListUpdate(pList);\n};\n\n/**\n * Update selectable options when changing types\n *\n * @param {HTMLNode} currentTypeSelect\n */\nconst updateSelectionFromType = (currentTypeSelect) => {\n    const createNewOption = (selectItem, label, value) => {\n        const option = document.createElement('option');\n        option.text = label;\n        option.value = value;\n\n        selectItem.add(option);\n    };\n\n    const participantData = JSON.parse(ELEMENT_SELECTOR.participantData().dataset.participantData);\n    // Clear all selection items.\n    const participantSelect = ELEMENT_SELECTOR.participantSelection();\n    while (participantSelect.firstChild) {\n        participantSelect.removeChild(participantSelect.firstChild);\n    }\n    // Add options depending on the selection.\n    if (currentTypeSelect.selectedIndex !== -1) {\n        const options = Object.values(participantData[currentTypeSelect.value].children);\n        options.forEach(option => {\n            createNewOption(participantSelect, option.name, option.id);\n        });\n\n        if (currentTypeSelect.value === 'all') {\n            createNewOption(participantSelect, '---------------', 'all');\n            currentTypeSelect.disabled = true;\n        } else {\n            currentTypeSelect.disabled = false;\n        }\n    }\n};\n"],"file":"modform.min.js"}