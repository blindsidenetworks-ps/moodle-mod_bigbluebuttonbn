{"version":3,"sources":["../src/repository.js"],"names":["getListTableRequest","bigbluebuttonbnid","removeimportedid","tools","methodname","args","fetchRecordings","removeImportedId","updateRecording","endMeeting","completionValidate","meetingInfo"],"mappings":"2OA0BMA,CAAAA,CAAmB,CAAG,SAACC,CAAD,CAAoBC,CAApB,CAAsCC,CAAtC,CAAiD,CACzE,MAAO,CACHC,UAAU,CAAE,wCADT,CAEHC,IAAI,CAAE,CACFJ,iBAAiB,CAAjBA,CADE,CAEFC,gBAAgB,CAAhBA,CAFE,CAGFC,KAAK,CAALA,CAHE,CAFH,CAQV,C,mBAU8B,QAAlBG,CAAAA,eAAkB,CAACL,CAAD,CAAoBM,CAApB,CAAsCJ,CAAtC,QAC3B,WAAU,CAACH,CAAmB,CAACC,CAAD,CAAoBM,CAApB,CAAsCJ,CAAtC,CAApB,CAAV,EAA6E,CAA7E,CAD2B,C,mBASA,QAAlBK,CAAAA,eAAkB,CAAAH,CAAI,QAAI,WAAU,CAC7C,CACID,UAAU,CAAE,8CADhB,CAEIC,IAAI,CAAJA,CAFJ,CAD6C,CAAV,EAKpC,CALoC,CAAJ,C,cAYT,QAAbI,CAAAA,UAAa,CAAAJ,CAAI,QAAI,WAAU,CACxC,CACID,UAAU,CAAE,+BADhB,CAEIC,IAAI,CAAJA,CAFJ,CADwC,CAAV,EAK/B,CAL+B,CAAJ,C,sBAYI,QAArBK,CAAAA,kBAAqB,CAAAL,CAAI,QAAI,WAAU,CAChD,CACID,UAAU,CAAE,uCADhB,CAEIC,IAAI,CAAJA,CAFJ,CADgD,CAAV,EAKvC,CALuC,CAAJ,C,eAaX,QAAdM,CAAAA,WAAc,CAAAN,CAAI,QAAI,WAAU,CACzC,CACID,UAAU,CAAE,gCADhB,CAEIC,IAAI,CAAJA,CAFJ,CADyC,CAAV,EAKhC,CALgC,CAAJ,C","sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\nimport {call as fetchMany} from 'core/ajax';\n\n/**\n * Request for recording\n *\n * @param   {Number} bigbluebuttonbnid The instance ID\n * @param   {Boolean} removeimported Remove already imported record\n * @param   {String} tools the set of tools to display\n * @returns {Promise}\n */\n\nconst getListTableRequest = (bigbluebuttonbnid, removeimportedid, tools)  => {\n    return {\n        methodname: 'mod_bigbluebutton_recording_list_table',\n        args: {\n            bigbluebuttonbnid,\n            removeimportedid,\n            tools\n        }\n    };\n};\n\n/**\n * Fetch the list of recordings from the server.\n *\n * @param   {Number} bigbluebuttonbnid The instance ID\n * @param   {Boolean} removeimported Remove already imported record\n * @param   {String} tools the set of tools to display\n * @returns {Promise}\n */\nexport const fetchRecordings = (bigbluebuttonbnid, removeImportedId, tools) =>\n    fetchMany([getListTableRequest(bigbluebuttonbnid, removeImportedId, tools)])[0];\n\n/**\n * Perform an update on a single recording.\n *\n * @param   {object} args The instance ID\n * @returns {Promise}\n */\nexport const updateRecording = args => fetchMany([\n    {\n        methodname: 'mod_bigbluebutton_recording_update_recording',\n        args,\n    }\n])[0];\n\n/**\n * end Meeting\n * @param args\n * @returns {*}\n */\nexport const endMeeting = args => fetchMany([\n    {\n        methodname: 'mod_bigbluebutton_meeting_end',\n        args,\n    }\n])[0];\n\n/**\n * completionValidate\n * @param args\n * @returns {*}\n */\nexport const completionValidate = args => fetchMany([\n    {\n        methodname: 'mod_bigbluebutton_completion_validate',\n        args,\n    }\n])[0];\n\n\n/**\n * MeetingInfo\n * @param args\n * @returns {*}\n */\nexport const meetingInfo = args => fetchMany([\n    {\n        methodname: 'mod_bigbluebutton_meeting_info',\n        args,\n    }\n])[0];\n"],"file":"repository.min.js"}