{"version":3,"sources":["../src/repository.js"],"names":["fetchRecordings","bigbluebuttonbnid","groupid","removeimportedid","tools","args","methodname","updateRecording","endMeeting","meetingid","completionValidate","getMeetingInfo","updatecache"],"mappings":"6PA0B+B,QAAlBA,CAAAA,eAAkB,CAACC,CAAD,CAAoBC,CAApB,CAA6BC,CAA7B,CAA+CC,CAA/C,CAAyD,CACpF,GAAMC,CAAAA,CAAI,CAAG,CACTJ,iBAAiB,CAAjBA,CADS,CAETE,gBAAgB,CAAhBA,CAFS,CAGTC,KAAK,CAALA,CAHS,CAAb,CAMA,GAAIF,CAAJ,CAAa,CACTG,CAAI,CAACH,OAAL,CAAeA,CAClB,CAED,MAAO,WAAU,CAAC,CAACI,UAAU,CAAE,wCAAb,CAAuDD,IAAI,CAAJA,CAAvD,CAAD,CAAV,EAA0E,CAA1E,CACV,C,mBAQ8B,QAAlBE,CAAAA,eAAkB,CAAAF,CAAI,QAAI,WAAU,CAC7C,CACIC,UAAU,CAAE,8CADhB,CAEID,IAAI,CAAJA,CAFJ,CAD6C,CAAV,EAKpC,CALoC,CAAJ,C,cAcT,QAAbG,CAAAA,UAAa,CAACP,CAAD,CAAoBQ,CAApB,QAAkC,WAAU,CAClE,CACIH,UAAU,CAAE,+BADhB,CAEID,IAAI,CAAE,CACFJ,iBAAiB,CAAjBA,CADE,CAEFQ,SAAS,CAATA,CAFE,CAFV,CADkE,CAAV,EAQzD,CARyD,CAAlC,C,sBAgBQ,QAArBC,CAAAA,kBAAqB,CAAAL,CAAI,QAAI,WAAU,CAChD,CACIC,UAAU,CAAE,uCADhB,CAEID,IAAI,CAAJA,CAFJ,CADgD,CAAV,EAKvC,CALuC,CAAJ,C,kBAgBR,QAAjBM,CAAAA,cAAiB,CAACV,CAAD,CAAoBQ,CAApB,KAA+BG,CAAAA,CAA/B,iEAAuD,WAAU,CAC3F,CACIN,UAAU,CAAE,gCADhB,CAEID,IAAI,CAAE,CACFJ,iBAAiB,CAAjBA,CADE,CAEFQ,SAAS,CAATA,CAFE,CAGFG,WAAW,CAAXA,CAHE,CAFV,CAD2F,CAAV,EASlF,CATkF,CAAvD,C","sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\nimport {call as fetchMany} from 'core/ajax';\n\n/**\n * Fetch the list of recordings from the server.\n *\n * @param   {Number} bigbluebuttonbnid The instance ID\n * @param   {number} groupid\n * @param   {Boolean} removeimportedid Remove already imported record\n * @param   {String} tools the set of tools to display\n * @returns {Promise}\n */\nexport const fetchRecordings = (bigbluebuttonbnid, groupid, removeimportedid, tools) => {\n    const args = {\n        bigbluebuttonbnid,\n        removeimportedid,\n        tools,\n    };\n\n    if (groupid) {\n        args.groupid = groupid;\n    }\n\n    return fetchMany([{methodname: 'mod_bigbluebutton_recording_list_table', args}])[0];\n};\n\n/**\n * Perform an update on a single recording.\n *\n * @param   {object} args The instance ID\n * @returns {Promise}\n */\nexport const updateRecording = args => fetchMany([\n    {\n        methodname: 'mod_bigbluebutton_recording_update_recording',\n        args,\n    }\n])[0];\n\n/**\n * End the Meeting\n *\n * @param {number} bigbluebuttonbnid\n * @param {string} meetingid\n * @returns {Promise}\n */\nexport const endMeeting = (bigbluebuttonbnid, meetingid) => fetchMany([\n    {\n        methodname: 'mod_bigbluebutton_meeting_end',\n        args: {\n            bigbluebuttonbnid,\n            meetingid,\n        },\n    }\n])[0];\n\n/**\n * Validate completion.\n *\n * @param {object} args\n * @returns {Promise}\n */\nexport const completionValidate = args => fetchMany([\n    {\n        methodname: 'mod_bigbluebutton_completion_validate',\n        args,\n    }\n])[0];\n\n\n/**\n * Fetch meeting info for the specified meeting.\n *\n * @param {number} bigbluebuttonbnid\n * @param {string} meetingid\n * @param {boolean} [updatecache=false]\n * @returns {Promise}\n */\nexport const getMeetingInfo = (bigbluebuttonbnid, meetingid, updatecache = false) => fetchMany([\n    {\n        methodname: 'mod_bigbluebutton_meeting_info',\n        args: {\n            bigbluebuttonbnid,\n            meetingid,\n            updatecache,\n        },\n    }\n])[0];\n"],"file":"repository.min.js"}