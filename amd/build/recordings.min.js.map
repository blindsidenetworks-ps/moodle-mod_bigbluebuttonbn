{"version":3,"file":"recordings.min.js","sources":["../src/recordings.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * JS for the recordings page on mod_bigbluebuttonbn plugin.\n *\n * @module      mod_bigbluebuttonbn/recordings\n * @copyright   2021 Blindside Networks Inc\n * @license     http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport * as repository from './repository';\nimport {exception as displayException} from 'core/notification';\nimport {prefetchStrings} from 'core/prefetch';\nimport {get_string as getString, get_strings as getStrings} from 'core/str';\nimport {addIconToContainerWithPromise} from 'core/loadingicon';\nimport ModalFactory from 'core/modal_factory';\nimport ModalEvents from 'core/modal_events';\nimport Pending from 'core/pending';\n\nconst stringsWithKeys = {\n    first: 'view_recording_yui_first',\n    prev: 'view_recording_yui_prev',\n    next: 'view_recording_yui_next',\n    last: 'view_recording_yui_last',\n    goToLabel: 'view_recording_yui_page',\n    goToAction: 'view_recording_yui_go',\n    perPage: 'view_recording_yui_rows',\n    showAll: 'view_recording_yui_show_all',\n};\n// Load global strings.\nprefetchStrings('bigbluebuttonbn', Object.entries(stringsWithKeys).map((entry) => entry[1]));\n\nconst getStringsForYui = () => {\n    const stringMap = Object.keys(stringsWithKeys).map(key => {\n        return {\n            key: stringsWithKeys[key],\n            component: 'mod_bigbluebuttonbn',\n        };\n    });\n\n    // Return an object with the matching string keys (we want an object with {<stringkey>: <stringvalue>...}).\n    return getStrings(stringMap)\n        .then((stringArray) => Object.assign({}, ...Object.keys(stringsWithKeys).map(\n            (key, index) => ({[key]: stringArray[index]})))\n        ).catch();\n};\n\nconst getYuiInstance = lang => new Promise(resolve => {\n    // eslint-disable-next-line\n    YUI({\n        lang,\n    }).use('intl', 'datatable', 'datatable-sort', 'datatable-paginator', 'datatype-number', Y => {\n        resolve(Y);\n    });\n});\n\n/**\n * Format the supplied date per the specified locale.\n *\n * @param   {string} locale\n * @param   {array} dateList\n * @returns {array}\n */\n const formatDates = (locale, dateList) => dateList.map(row => {\n    const date = new Date(row.date);\n    row.date = date.toLocaleDateString(locale, {\n        weekday: 'long',\n        year: 'numeric',\n        month: 'long',\n        day: 'numeric',\n    });\n    return row;\n\n});\n\n/**\n * Format response data for the table.\n *\n * @param   {string} response JSON-encoded table data\n * @returns {array}\n */\nconst getFormattedData = response => {\n    const recordingData = response.tabledata;\n    const rowData = JSON.parse(recordingData.data);\n\n    return formatDates(recordingData.locale, rowData);\n};\n\nconst getTableNode = tableSelector => document.querySelector(tableSelector);\n\nconst fetchRecordingData = tableSelector => {\n    const tableNode = getTableNode(tableSelector);\n\n    if (tableNode.dataset.importMode) {\n        return repository.fetchRecordingsToImport(\n            tableNode.dataset.bbbid,\n            tableNode.dataset.bbbSourceInstanceId,\n            tableNode.dataset.bbbSourceCourseId,\n            tableNode.dataset.tools,\n            tableNode.dataset.groupId\n        );\n    } else {\n        return repository.fetchRecordings(\n            tableNode.dataset.bbbid,\n            tableNode.dataset.tools,\n            tableNode.dataset.groupId\n        );\n    }\n};\n\n/**\n * Fetch the data table functinos for the specified table.\n *\n * @param {String} tableId in which we will display the table\n * @param {String} searchFormId The Id of the relate.\n * @param {Object} dataTable\n * @returns {Object}\n * @private\n */\nconst getDataTableFunctions = (tableId, searchFormId, dataTable) => {\n    const tableNode = getTableNode(tableId);\n    const bbbid = tableNode.dataset.bbbid;\n\n    const updateTableFromResponse = response => {\n        if (!response || !response.status) {\n            // There was no output at all.\n            return;\n        }\n\n        dataTable.get('data').reset(getFormattedData(response));\n        dataTable.set(\n            'currentData',\n            dataTable.get('data')\n        );\n\n        const currentFilter = dataTable.get('currentFilter');\n        if (currentFilter) {\n            filterByText(currentFilter);\n        }\n    };\n\n    const refreshTableData = () => fetchRecordingData(tableId).then(updateTableFromResponse);\n\n    const filterByText = value => {\n        const dataModel = dataTable.get('currentData');\n        dataTable.set('currentFilter', value);\n\n        const escapedRegex = value.replace(/[-[\\]{}()*+?.,\\\\^$|#\\s]/g, \"\\\\$&\");\n        const rsearch = new RegExp(`<span>.*?${escapedRegex}.*?</span>`, 'i');\n\n        dataTable.set('data', dataModel.filter({asList: true}, item => {\n            const name = item.get('recording');\n            if (name && rsearch.test(name)) {\n                return true;\n            }\n\n            const description = item.get('description');\n            return description && rsearch.test(description);\n        }));\n    };\n\n    const requestAction = (element) => {\n        const getDataFromAction = (element, dataType) => {\n            const dataElement = element.closest(`[data-${dataType}]`);\n            if (dataElement) {\n                return dataElement.dataset[dataType];\n            }\n\n            return null;\n        };\n\n        const elementData = element.dataset;\n        const payload = {\n            bigbluebuttonbnid: bbbid,\n            recordingid: getDataFromAction(element, 'recordingid'),\n            additionaloptions: getDataFromAction(element, 'additionaloptions'),\n            action: elementData.action,\n        };\n        // Slight change for import, for additional options.\n        if (!payload.additionaloptions) {\n            payload.additionaloptions = {};\n        }\n        if (elementData.action === 'import') {\n            const bbbsourceid = getDataFromAction(element, 'source-instance-id');\n            const bbbcourseid = getDataFromAction(element, 'source-course-id');\n            if (!payload.additionaloptions) {\n                payload.additionaloptions = {};\n            }\n            payload.additionaloptions.sourceid = bbbsourceid ? bbbsourceid : 0;\n            payload.additionaloptions.bbbcourseid = bbbcourseid ? bbbcourseid : 0;\n        }\n        // Now additional options should be a json string.\n        payload.additionaloptions = JSON.stringify(payload.additionaloptions);\n        if (element.dataset.requireConfirmation === \"1\") {\n            // Create the confirmation dialogue.\n            return new Promise((resolve) =>\n                ModalFactory.create({\n                    title: getString('confirm'),\n                    body: recordingConfirmationMessage(payload),\n                    type: ModalFactory.types.SAVE_CANCEL\n                }).then(async(modal) => {\n                    modal.setSaveButtonText(await getString('ok', 'moodle'));\n\n                    // Handle save event.\n                    modal.getRoot().on(ModalEvents.save, () => {\n                        resolve(true);\n                    });\n\n                    // Handle hidden event.\n                    modal.getRoot().on(ModalEvents.hidden, () => {\n                        // Destroy when hidden.\n                        modal.destroy();\n                        resolve(false);\n                    });\n\n                    modal.show();\n\n                    return modal;\n                }).catch(Notification.exception)\n            ).then((proceed) =>\n                proceed ? repository.updateRecording(payload) : () => null\n            );\n        } else {\n            return repository.updateRecording(payload);\n        }\n    };\n\n    const recordingConfirmationMessage = async(data) => {\n\n        const playbackElement = document.querySelector(`#playbacks-${data.recordingid}`);\n        const recordingType = await getString(\n            playbackElement.dataset.imported === 'true' ? 'view_recording_link' : 'view_recording',\n            'bigbluebuttonbn'\n        );\n\n        const confirmation = await getString(`view_recording_${data.action}_confirmation`, 'bigbluebuttonbn', recordingType);\n\n        if (data.action === 'import') {\n            return confirmation;\n        }\n\n        // If it has associated links imported in a different course/activity, show that in confirmation dialog.\n        const associatedLinkCount = document.querySelector(`a#recording-${data.action}-${data.recordingid}`)?.dataset?.links;\n        if (!associatedLinkCount || associatedLinkCount === 0) {\n            return confirmation;\n        }\n\n        const confirmationWarning = await getString(\n            associatedLinkCount === 1\n                ? `view_recording_${data.action}_confirmation_warning_p`\n                : `view_recording_${data.action}_confirmation_warning_s`,\n            'bigbluebuttonbn',\n            associatedLinkCount\n        );\n\n        return confirmationWarning + '\\n\\n' + confirmation;\n    };\n\n    /**\n     * Process an action event.\n     *\n     * @param   {Event} e\n     */\n    const processAction = e => {\n        const popoutLink = e.target.closest('[data-action=\"play\"]');\n        if (popoutLink) {\n            e.preventDefault();\n\n            const videoPlayer = window.open('', '_blank');\n            videoPlayer.opener = null;\n            videoPlayer.location.href = popoutLink.href;\n            // TODO send a recording viewed event when this event will be implemented.\n            return;\n        }\n\n        // Fetch any clicked anchor.\n        const clickedLink = e.target.closest('a[data-action]');\n        if (clickedLink && !clickedLink.classList.contains('disabled')) {\n            e.preventDefault();\n\n            // Create a spinning icon on the table.\n            const iconPromise = addIconToContainerWithPromise(dataTable.get('boundingBox').getDOMNode());\n\n            requestAction(clickedLink)\n                .then(refreshTableData)\n                .catch(displayException)\n                .then(iconPromise.resolve)\n                .catch();\n        }\n    };\n\n    const processSearchSubmission = e => {\n        // Prevent the default action.\n        e.preventDefault();\n        const parentNode = e.target.closest('div[role=search]');\n        const searchInput = parentNode.querySelector('input[name=search]');\n        filterByText(searchInput.value);\n    };\n\n    const registerEventListeners = () => {\n        // Add event listeners to the table boundingBox.\n        const boundingBox = dataTable.get('boundingBox').getDOMNode();\n        boundingBox.addEventListener('click', processAction);\n\n        // Setup the search from handlers.\n        const searchForm = document.querySelector(searchFormId);\n        if (searchForm) {\n            const searchButton = document.querySelector(searchFormId + ' button');\n            searchButton.addEventListener('click', processSearchSubmission);\n        }\n    };\n\n    return {\n        filterByText,\n        refreshTableData,\n        registerEventListeners,\n    };\n};\n\n/**\n * Setup the data table for the specified BBB instance.\n *\n * @param {String} tableId in which we will display the table\n * @param {String} searchFormId The Id of the relate.\n * @param   {object} response The response from the data request\n * @returns {Promise}\n */\nconst setupDatatable = (tableId, searchFormId, response) => {\n    if (!response) {\n        return Promise.resolve();\n    }\n\n    if (!response.status) {\n        // Something failed. Continue to show the plain output.\n        return Promise.resolve();\n    }\n\n    const recordingData = response.tabledata;\n\n    const pendingPromise = new Pending('mod_bigbluebuttonbn/recordings/setupDatatable');\n    return Promise.all([getYuiInstance(recordingData.locale), getStringsForYui()])\n        .then(([yuiInstance, strings]) => {\n            // Here we use a custom formatter for date.\n            // See https://clarle.github.io/yui3/yui/docs/api/classes/DataTable.BodyView.Formatters.html\n            // Inspired from examples here: https://clarle.github.io/yui3/yui/docs/datatable/\n            // Normally formatter have the prototype: (col) => (cell) => <computed value>, see:\n            // https://clarle.github.io/yui3/yui/docs/api/files/datatable_js_formatters.js.html#l100 .\n           // const dateCustomFormatter = () => (cell) => formatDate(recordingData.locale, cell.value);\n            // Add the fetched strings to the YUI Instance.\n            yuiInstance.Intl.add('datatable-paginator', yuiInstance.config.lang, {...strings});\n           // yuiInstance.DataTable.BodyView.Formatters.customDate = dateCustomFormatter;\n            return yuiInstance;\n        })\n        .then(yuiInstance => {\n\n            const tableData = getFormattedData(response);\n            yuiInstance.RecordsPaginatorView = Y.Base.create('my-paginator-view', yuiInstance.DataTable.Paginator.View, [], {\n                _modelChange: function(e) {\n                    var changed = e.changed,\n                        totalItems = (changed && changed.totalItems);\n                    if (totalItems) {\n                        this._updateControlsUI(e.target.get('page'));\n                    }\n                }\n            });\n            return new yuiInstance.DataTable({\n                paginatorView: \"RecordsPaginatorView\",\n                width: \"1195px\",\n                columns: recordingData.columns,\n                data: tableData,\n                rowsPerPage: 10,\n                paginatorLocation: ['header', 'footer'],\n                autoSync: true\n            });\n        })\n        .then(dataTable => {\n            dataTable.render(tableId);\n            const {registerEventListeners} = getDataTableFunctions(\n                tableId,\n                searchFormId,\n                dataTable);\n            registerEventListeners();\n            return dataTable;\n        })\n        .then(dataTable => {\n            pendingPromise.resolve();\n            return dataTable;\n        });\n};\n\n/**\n * Initialise recordings code.\n *\n * @method init\n * @param {String} tableId in which we will display the table\n * @param {String} searchFormId The Id of the relate.\n */\nexport const init = (tableId, searchFormId) => {\n    fetchRecordingData(tableId)\n        .then(response => setupDatatable(tableId, searchFormId, response))\n        .catch(displayException);\n};\n"],"names":["stringsWithKeys","first","prev","next","last","goToLabel","goToAction","perPage","showAll","Object","entries","map","entry","getFormattedData","response","locale","recordingData","tabledata","rowData","JSON","parse","data","row","date","Date","toLocaleDateString","weekday","year","month","day","getTableNode","tableSelector","document","querySelector","fetchRecordingData","tableNode","dataset","importMode","repository","fetchRecordingsToImport","bbbid","bbbSourceInstanceId","bbbSourceCourseId","tools","groupId","fetchRecordings","getDataTableFunctions","tableId","searchFormId","dataTable","updateTableFromResponse","status","get","reset","set","currentFilter","filterByText","refreshTableData","then","value","dataModel","escapedRegex","replace","rsearch","RegExp","filter","asList","item","name","test","description","recordingConfirmationMessage","playbackElement","recordingid","imported","recordingType","action","confirmation","associatedLinkCount","_document$querySelect","_document$querySelect2","links","confirmationWarning","processAction","e","popoutLink","target","closest","preventDefault","videoPlayer","window","open","opener","location","href","clickedLink","classList","contains","iconPromise","getDOMNode","element","getDataFromAction","dataType","dataElement","elementData","payload","bigbluebuttonbnid","additionaloptions","bbbsourceid","bbbcourseid","sourceid","stringify","requireConfirmation","Promise","resolve","ModalFactory","create","title","body","type","types","SAVE_CANCEL","modal","setSaveButtonText","getRoot","on","ModalEvents","save","hidden","destroy","show","catch","Notification","exception","proceed","updateRecording","requestAction","displayException","processSearchSubmission","searchInput","registerEventListeners","addEventListener","setupDatatable","stringMap","lang","pendingPromise","Pending","all","YUI","use","Y","keys","key","component","stringArray","assign","index","yuiInstance","strings","Intl","add","config","tableData","RecordsPaginatorView","Base","DataTable","Paginator","View","_modelChange","changed","totalItems","_updateControlsUI","paginatorView","width","columns","rowsPerPage","paginatorLocation","autoSync","render"],"mappings":"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"}