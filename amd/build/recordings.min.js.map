{"version":3,"sources":["../src/recordings.js"],"names":["initYuiLanguage","Y","stringList","map","key","component","then","first","prev","next","last","goToLabel","goToAction","perPage","showAll","Intl","add","config","lang","catch","formatDates","locale","dateList","row","date","Date","toLocaleDateString","weekday","year","month","day","getFormattedData","response","recordingData","tabledata","rowData","JSON","parse","data","getTableInformations","tableId","tableElement","document","querySelector","bbbid","dataset","tools","removeImportedId","getDataTableFunctions","searchFormId","dataTable","updateTableFromResponse","status","get","reset","set","currentFilter","filterByText","refreshTableData","repository","fetchRecordings","value","dataModel","escapedRegex","replace","rsearch","RegExp","filter","asList","item","name","test","description","requestAction","element","getDataFromAction","dataType","closest","elementData","payload","bigbluebuttonbnid","recordingid","recid","additionaloptions","action","requireConfirmation","Promise","resolve","ModalFactory","create","title","Str","get_string","body","recordingConfirmationMessage","type","types","SAVE_CANCEL","modal","setSaveButtonText","getRoot","on","ModalEvents","save","hidden","destroy","show","Notification","exception","proceed","updateRecording","confirmation","recordingType","playbackElement","imported","associatedLinks","links","numberAssociatedLinks","Number","parseInt","confirmationWarning","processAction","e","popoutLink","target","preventDefault","videoPlayer","window","open","opener","location","href","clickedLink","iconPromise","getDOMNode","displayException","processSearchSubmission","parentNode","searchInput","registerEventListeners","boundingBox","addEventListener","searchForm","searchButton","setupDatatable","showRecordings","profile_features","indexOf","YUI","use","tableData","DataTable","width","columns","rowsPerPage","paginatorLocation","render","init"],"mappings":"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","sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\nimport * as repository from './repository';\nimport {exception as displayException} from 'core/notification';\nimport {get_strings as getStrings} from 'core/str';\nimport {addIconToContainerWithPromise} from 'core/loadingicon';\nimport ModalFactory from 'core/modal_factory';\nimport ModalEvents from 'core/modal_events';\nimport * as Str from 'core/str';\n\n// eslint-disable-next-line\nconst convertFeaturesToMap = profileFeatures => {\n    const mappedFeatures = new Map();\n    for (const feature of profileFeatures) {\n        mappedFeatures.set(feature, true);\n    }\n\n    return mappedFeatures;\n};\n\n/**\n * Initiate the YUI langauge strings with appropriate values for the sortable list from Moodle.\n *\n * @param   {YUI} Y\n * @returns {Promise}\n */\nconst initYuiLanguage = Y => {\n    const stringList = [\n        'view_recording_yui_first',\n        'view_recording_yui_prev',\n        'view_recording_yui_next',\n        'view_recording_yui_last',\n        'view_recording_yui_page',\n        'view_recording_yui_go',\n        'view_recording_yui_rows',\n        'view_recording_yui_show_all',\n    ].map(key => {\n        return {\n            key,\n            component: 'bigbluebuttonbn',\n        };\n    });\n\n    return getStrings(stringList)\n        .then(([first, prev, next, last, goToLabel, goToAction, perPage, showAll]) => {\n            Y.Intl.add('datatable-paginator', Y.config.lang, {\n                first,\n                prev,\n                next,\n                last,\n                goToLabel,\n                goToAction,\n                perPage,\n                showAll,\n            });\n        })\n        .catch();\n};\n\n/**\n * Format the supplied date per the specified locale.\n *\n * @param   {string} locale\n * @param   {array} dateList\n * @returns {array}\n */\nconst formatDates = (locale, dateList) => dateList.map(row => {\n    const date = new Date(row.date);\n    row.date = date.toLocaleDateString(locale, {\n        weekday: 'long',\n        year: 'numeric',\n        month: 'long',\n        day: 'numeric'\n    });\n\n    return row;\n});\n\n/**\n * Format response data for the table.\n *\n * @param   {string} response JSON-encoded table data\n * @returns {array}\n */\nconst getFormattedData = response => {\n    const recordingData = response.tabledata;\n    let rowData = JSON.parse(recordingData.data);\n\n    rowData = formatDates(recordingData.locale, rowData);\n\n    return rowData;\n};\n/**\n *\n * @param {String} tableId in which we will display the table\n * @returns {[(*|number), string, boolean]}\n */\nconst getTableInformations = (tableId) => {\n    const tableElement = document.querySelector(tableId);\n    const bbbid = tableElement.dataset.bbbid;\n    const tools = tableElement.dataset.tools;\n    const removeImportedId = tableElement.dataset.removeImportedId;\n    return [bbbid, removeImportedId, tools];\n};\n\n/**\n *\n * @param {String} tableId in which we will display the table\n * @param {String} searchFormId The Id of the relate.\n * @param {Object} dataTable\n * @returns {{refreshTableData: refreshTableData, filterByText: filterByText, registerEventListeners: registerEventListeners}}\n */\nconst getDataTableFunctions = (tableId, searchFormId, dataTable) => {\n    const updateTableFromResponse = response => {\n        if (!response || !response.status) {\n            // There was no output at all.\n            return;\n        }\n\n        dataTable.get('data').reset(getFormattedData(response));\n        dataTable.set(\n            'currentData',\n            dataTable.get('data')\n        );\n\n        const currentFilter = dataTable.get('currentFilter');\n        if (currentFilter) {\n            filterByText(currentFilter);\n        }\n    };\n\n    const [bbbid, removeImportedId, tools] = getTableInformations(tableId);\n    const refreshTableData = () => repository.fetchRecordings(bbbid, removeImportedId, tools).then(updateTableFromResponse);\n\n    const filterByText = value => {\n        const dataModel = dataTable.get('currentData');\n        dataTable.set('currentFilter', value);\n\n        const escapedRegex = value.replace(/[-[\\]{}()*+?.,\\\\^$|#\\s]/g, \"\\\\$&\");\n        const rsearch = new RegExp(`<span>.*?${escapedRegex}.*?</span>`, 'i');\n\n        dataTable.set('data', dataModel.filter({asList: true}, item => {\n            const name = item.get('recording');\n            if (name && rsearch.test(name)) {\n                return true;\n            }\n\n            const description = item.get('description');\n            if (description && rsearch.test(description)) {\n                return true;\n            }\n\n            return false;\n        }));\n    };\n\n    const requestAction = (element) => {\n        const getDataFromAction = (element, dataType) => element.closest(`[data-${dataType}]`).dataset[dataType];\n\n        const elementData = element.dataset;\n        const payload = {\n            bigbluebuttonbnid: bbbid,\n            recordingid: getDataFromAction(element, 'recordingid'),\n            recid: getDataFromAction(element, 'recid'),\n            additionaloptions: getDataFromAction(element, 'additionaloptions'),\n            action: elementData.action,\n        };\n        // Slight change for import, the bigbluebuttonid is the bbb origin id.\n        if (elementData.action === 'import') {\n            payload.bigbluebuttonbnid = getDataFromAction(element, 'bboriginid');\n        }\n        if (element.dataset.requireConfirmation === \"1\") {\n            // Create the confirmation dialogue.\n            return new Promise((resolve) =>\n                ModalFactory.create({\n                    title: Str.get_string('confirm'),\n                    body: recordingConfirmationMessage(payload),\n                    type: ModalFactory.types.SAVE_CANCEL\n                }).then((modal) => {\n                    modal.setSaveButtonText(Str.get_string('ok'));\n\n                    // Handle save event.\n                    modal.getRoot().on(ModalEvents.save, function () {\n                        resolve(true);\n                    });\n\n                    // Handle hidden event.\n                    modal.getRoot().on(ModalEvents.hidden, function () {\n                        // Destroy when hidden.\n                        modal.destroy();\n                        resolve(false);\n                    });\n\n                    modal.show();\n\n                }).catch(Notification.exception)\n            ).then((proceed) =>\n                proceed ? repository.updateRecording(payload) : () => null\n            );\n        } else {\n            return repository.updateRecording(payload);\n        }\n    };\n\n    const recordingConfirmationMessage = async (data) => {\n        let confirmation = await Str.get_string('view_recording_' + data.action + '_confirmation', 'bigbluebuttonbn');\n        if (typeof confirmation === 'undefined') {\n            return '';\n        }\n        let recordingType = await Str.get_string('view_recording', 'bigbluebuttonbn');\n        const playbackElement = document.querySelector('#playbacks-' + data.recordingid);\n        if (playbackElement.dataset.imported === 'true') {\n            recordingType = await Str.get_string('view_recording_link', 'bigbluebuttonbn');\n        }\n        confirmation = confirmation.replace(\"{$a}\", recordingType);\n        if (data.action === 'import') {\n            return confirmation;\n        }\n        // If it has associated links imported in a different course/activity, show that in confirmation dialog.\n        const associatedLinks = document.querySelector(`a#recording-${data.action}-${data.recordingid}`);\n\n        if (associatedLinks && associatedLinks.dataset && associatedLinks.dataset.links === 0) {\n            return confirmation;\n        }\n        const numberAssociatedLinks = Number.parseInt(associatedLinks.dataset.links);\n        let confirmationWarning = await Str.get_string('view_recording_' + data.action + '_confirmation_warning_p',\n            'bigbluebuttonbn', numberAssociatedLinks);\n        if (numberAssociatedLinks === 1) {\n            confirmationWarning = await Str.get_string('view_recording_' + data.action + '_confirmation_warning_s',\n                'bigbluebuttonbn');\n        }\n        confirmationWarning = confirmationWarning.replace(\"{$a}\", numberAssociatedLinks) + '. ';\n        return confirmationWarning + '\\n\\n' + confirmation;\n    };\n\n    /**\n     * Process an action event.\n     *\n     * @param   {Event} e\n     */\n    const processAction = e => {\n        const popoutLink = e.target.closest('a[data-href]');\n        if (popoutLink) {\n            e.preventDefault();\n\n            const videoPlayer = window.open('', '_blank');\n            videoPlayer.opener = null;\n            videoPlayer.location.href = popoutLink.dataset.href;\n\n            // TODO repository.viewRecording(args); .\n\n            return;\n        }\n\n        // Fetch any clicked anchor.\n        const clickedLink = e.target.closest('a[data-action]');\n        if (clickedLink) {\n            e.preventDefault();\n\n            // Create a spinning icon on the table.\n            const iconPromise = addIconToContainerWithPromise(dataTable.get('boundingBox').getDOMNode());\n\n            requestAction(clickedLink)\n                .then(refreshTableData)\n                .catch(displayException)\n                .then(iconPromise.resolve);\n        }\n    };\n\n    const processSearchSubmission = e => {\n        // Prevent the default action.\n        e.preventDefault();\n        const parentNode = e.target.closest('div[role=search]');\n        const searchInput = parentNode.querySelector('input[name=search]');\n        filterByText(searchInput.value);\n    };\n\n    const registerEventListeners = () => {\n        // Add event listeners to the table boundingBox.\n        const boundingBox = dataTable.get('boundingBox').getDOMNode();\n        boundingBox.addEventListener('click', processAction);\n\n        // Setup the search from handlers.\n        const searchForm = document.querySelector(searchFormId);\n        if (searchForm) {\n            const searchButton = document.querySelector(searchFormId + ' button');\n            searchButton.addEventListener('click', processSearchSubmission);\n        }\n    };\n\n    return {\n        filterByText,\n        refreshTableData,\n        registerEventListeners,\n    };\n};\n\n/**\n * Setup the data table for the specified BBB instance.\n *\n * @param {String} tableId in which we will display the table\n * @param {String} searchFormId The Id of the relate.\n * @param   {object} response The response from the data request\n * @returns {Promise}\n */\nconst setupDatatable = (tableId, searchFormId, response) => {\n    if (!response) {\n        return Promise.resolve();\n    }\n\n    if (!response.status) {\n        // Something failed. Continue to show the plain output.\n        return Promise.resolve();\n    }\n\n    const recordingData = response.tabledata;\n\n    let showRecordings = recordingData.profile_features.indexOf('all') !== -1;\n    showRecordings = showRecordings || recordingData.profile_features.indexOf('showrecordings') !== -1;\n    if (!showRecordings) {\n        // TODO: This should be handled by the web service.\n        // This user is not allowed to view recordings.\n        return Promise.resolve();\n    }\n\n    return new Promise(function (resolve) {\n        // eslint-disable-next-line\n        YUI({\n            lang: recordingData.locale,\n        }).use('intl', 'datatable', 'datatable-sort', 'datatable-paginator', 'datatype-number', Y => {\n            initYuiLanguage(Y)\n                .then(() => {\n                    const tableData = getFormattedData(response);\n\n                    const dataTable = new Y.DataTable({\n                        width: \"1195px\",\n                        columns: recordingData.columns,\n                        data: tableData,\n                        rowsPerPage: 3,\n                        paginatorLocation: ['header', 'footer']\n                    });\n                    dataTable.set('currentData', dataTable.get('data'));\n                    dataTable.set('currentFilter', '');\n\n                    return dataTable;\n                })\n                .then(resolve)\n                .catch();\n        });\n    })\n        .then(dataTable => {\n            dataTable.render(tableId);\n            const {registerEventListeners} = getDataTableFunctions(\n                tableId,\n                searchFormId,\n                dataTable);\n            registerEventListeners();\n\n            return dataTable;\n        });\n};\n\n/**\n * Initialise recordings code.\n *\n * @method init\n * @param {String} tableId in which we will display the table\n * @param {String} searchFormId The Id of the relate.\n */\nexport const init = (tableId, searchFormId) => {\n    const [bbbid, removeImportedId, tools] = getTableInformations(tableId);\n    repository.fetchRecordings(bbbid, removeImportedId, tools)\n        .then(response => setupDatatable(tableId, searchFormId, response))\n        .catch(displayException);\n};\n"],"file":"recordings.min.js"}